#summary How to configure logging for Hazelcast.
*IMPORTANT! This documentation is out-dated and will be removed soon. Official Hazelcast documentation can be found at http://www.hazelcast.com/docs.jsp.

=Logging=

Hazelcast doesn't depend on any logging framework except standard java.util.logging. But you can make hazelcast work with log4j or slf4j. Also a custom logging can be implemented. 

==Default logger==

By default java.util.logging is used. By setting the path to logging.properties file you can configure it. 
Ex: `-Djava.util.logging.config.file=/dev/logs/logging.properties`

==Support for log4j and slf4j==

To enable log4j or slf4j you must set `-Dhazelcast.logging.type=log4j` or `-Dhazelcast.logging.type=slf4j` respectively. Then configure accordingly. Make sure to have all required libraries in your classpath. Hazelcast doesn't have dependencies to them, it will assume those libraries to be provided by the user.  

==No logging==

Set `-Dhazelcast.logging.type=none`. This will disable logging. No log messages will be printed. 
 

==Custom logging==

Hazelcast let's you to inject any logging framework or custom one by implementing a wrapper (adapter). You need to implement `com.hazelcast.logging.LoggerFactory` class and set the class name as a system property. Ex: `-Dhazelcast.logging.class=com.company.MyLoggerFactory`. 

Note that LoggerFactory class should return an implementation of `com.hazelcast.logging.ILogger`. 


= Logging Service =
{{{
LoggingService loggingService = Hazelcast.getLoggingService();
}}}

LoggingService allows you to listen for LogEvents generated by Hazelcast runtime. You can log the events somewhere or take action based on the message.

Through the logging service you can get the current used ILogger implementation and log your own messages too.  