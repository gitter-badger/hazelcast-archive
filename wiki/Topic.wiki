#summary Distributed Topic for pub/sub messaging
== Distributed Topic ==
*IMPORTANT! This documentation is out-dated and will be removed soon. Official Hazelcast documentation can be found at http://www.hazelcast.com/docs.jsp.

Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. Publish and subscriptions are cluster-wide. When a member subscribes for a topic, it is actually registering for messages published by any member in the cluster, including the new members joined after you added the listener.

Messages are ordered, meaning, listeners(subscribers) will process the messages in the order they are actually published. If cluster member M publishes messages m1, m2, m3...mn
to a topic T, then Hazelcast makes sure that all of the subscribers of topic T will receive and process m1, m2, m3...mn in order.

{{{
import com.hazelcast.core.Topic;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.MessageListener;

public class Sample implements MessageListener {

	public static void main(String[] args) { 
		Sample sample = new Sample();
		Topic topic = Hazelcast.getTopic ("default");  
		topic.addMessageListener(sample); 		
		topic.publish ("my-message-object");
	}  
	 
	public void onMessage(Object msg) {
		System.out.println("Message received = " + msg);
	} 
}

}}}     