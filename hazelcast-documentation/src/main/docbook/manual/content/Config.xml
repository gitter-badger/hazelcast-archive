<?xml version='1.0' encoding='UTF-8'?>

<para version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/2000/svg"
    xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook"> Hazelcast can be configured through xml or
    using configuration api or even mix of both. <orderedlist>
        <listitem>
            <para><emphasis role="bold">Xml Configuration</emphasis></para>
            <para>If you are using default Hazelcast instance
                    (<literal>Hazelcast.getDefaultInstance()</literal>) or creating new Hazelcast
                instance with passing <literal>null</literal> parameter
                    (<literal>Hazelcast.newHazelcastInstance(null)</literal>), Hazelcast will look
                into two places for the configuration file: <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">System property:</emphasis> Hazelcast will first
                            check if "<literal>hazelcast.config</literal>" system property is set to
                            a file path. Example:
                                <literal>-Dhazelcast.config=C:/myhazelcast.xml</literal>. </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Classpath:</emphasis> If config file is not set
                            as a system property, Hazelcast will check classpath for <emphasis
                                role="bold"><literal>hazelcast.xml</literal></emphasis> file.</para>
                    </listitem>
                </itemizedlist>If Hazelcast doesn't find any config file, it will happily start with
                default configuration (<literal>hazelcast-default.xml</literal>) located in
                    <literal>hazelcast.jar</literal>. (Before configuring Hazelcast, please try to
                work with default configuration to see if it works for you. Default should be just
                fine for most of the users. If not, then consider custom configuration for your
                environment.) <programlisting language="xml"><![CDATA[<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
           xmlns="http://www.hazelcast.com/schema/config"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <group>
        <name>dev</name>
        <password>dev-pass</password>
    </group>
    <network>
        <port auto-increment="true">5701</port>
        <join>
            <multicast enabled="true">
                <multicast-group>224.2.2.3</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
            <tcp-ip enabled="false">
                <interface>127.0.0.1</interface>
            </tcp-ip>
            <aws enabled="false">
                <access-key>my-access-key</access-key>
                <secret-key>my-secret-key</secret-key>
                <region>us-east-1</region>
            </aws>
        </join>
        <interfaces enabled="false">
            <interface>10.10.1.*</interface>
        </interfaces>]]></programlisting><programlisting language="xml"><![CDATA[
        <symmetric-encryption enabled="false">
            <!--
               encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES,
               AES/CBC/PKCS5Padding, Blowfish, DESede
            -->
            <algorithm>PBEWithMD5AndDES</algorithm>
            <!-- salt value to use when generating the secret key -->
            <salt>thesalt</salt>
            <!-- pass phrase to use when generating the secret key -->
            <password>thepass</password>
            <!-- iteration count to use when generating the secret key -->
            <iteration-count>19</iteration-count>
        </symmetric-encryption>
        <asymmetric-encryption enabled="false">
            <!-- encryption algorithm -->
            <algorithm>RSA/NONE/PKCS1PADDING</algorithm>
            <!-- private key password -->
            <keyPassword>thekeypass</keyPassword>
            <!-- private key alias -->
            <keyAlias>local</keyAlias>
            <!-- key store type -->
            <storeType>JKS</storeType>
            <!-- key store password -->
            <storePassword>thestorepass</storePassword>
            <!-- path to the key store -->
            <storePath>keystore</storePath>
        </asymmetric-encryption>
    </network>
    <executor-service>
        <core-pool-size>16</core-pool-size>
        <max-pool-size>64</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>
    <queue name="default">
        <!--
            Maximum size of the queue. When a JVM's local queue size reaches the maximum,
            all put/offer operations will get blocked until the queue size
            of the JVM goes down below the maximum. Any integer between 0 and Integer.MAX_VALUE
            0 means Integer.MAX_VALUE. Default is 0.
        -->
        <max-size-per-jvm>0</max-size-per-jvm>
        <!--
            Name of the map configuration that will be used for the backing distributed
            map for this queue.
        -->
        <backing-map-ref>default</backing-map-ref>
    </queue>]]></programlisting><programlisting language="xml"><![CDATA[
    <map name="default">
        <!--
            Number of backups. If 1 is set as the backup-count for example, then all entries of 
            the map will be copied to another JVM for fail-safety. 0 means no backup.
        -->
        <backup-count>1</backup-count>
        <!-- 
	        Maximum number of seconds for each entry to stay in the map. Entries that are
			older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
			will get automatically evicted from the map.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
        -->
        <time-to-live-seconds>0</time-to-live-seconds>
        <!--
        	Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
        -->
        <max-idle-seconds>0</max-idle-seconds>
        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
        <eviction-policy>NONE</eviction-policy>
        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size policy="cluster_wide_map_size">0</max-size>
        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>
        <!--
            While recovering from split-brain (network partitioning),
            map entries in the small cluster will merge into the bigger cluster
            based on the policy set here. When an entry merge into the
            cluster, there might an existing entry with the same key already.
            Values of these entries might be different for that same key.
            Which value should be set for the key? Conflict is resolved by
            the policy set here. Default policy is hz.ADD_NEW_ENTRY

            There are built-in merge policies such as
            hz.NO_MERGE      ; no entry will merge.
            hz.ADD_NEW_ENTRY ; entry will be added if the merging entry's key
                               doesn't exist in the cluster.
            hz.HIGHER_HITS   ; entry with the higher hits wins.
            hz.LATEST_UPDATE ; entry with the latest update wins.
        -->
        <merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
    </map>
</hazelcast>
]]></programlisting> If you want to specify your own configuration file to create
                    <literal>Config</literal>, Hazelcast supports several ways including filesystem,
                classpath, InputStream, URL etc.: <itemizedlist>
                    <listitem>
                        <para><code language="java">Config cfg = new
                                XmlConfigBuilder(xmlFileName).build();</code></para>
                    </listitem>
                    <listitem>
                        <para><code language="java">Config cfg = new
                                XmlConfigBuilder(inputStream).build();</code></para>
                    </listitem>
                    <listitem>
                        <para><code language="java">Config cfg = new
                                ClasspathXmlConfig(xmlFileName);</code></para>
                    </listitem>
                    <listitem>
                        <para><code language="java">Config cfg = new
                                FileSystemXmlConfig(configFilename);</code></para>
                    </listitem>
                    <listitem>
                        <para><code language="java">Config cfg = new
                            UrlXmlConfig(url);</code></para>
                    </listitem>
                    <listitem>
                        <para><code language="java">Config cfg = new
                            InMemoryXmlConfig(xml);</code></para>
                    </listitem>
                </itemizedlist>
            </para>
        </listitem>
        <listitem>
            <para><emphasis role="bold">Programmatic Configuration</emphasis></para>
            <para>To configure Hazelcast programmatically, just instantiate a <literal>Config</literal>
            object and set/change its properties/attributes due to your needs. 
            <programlisting language="java"><![CDATA[Config cfg = new Config();
cfg.setPort(5900);
cfg.setPortAutoIncrement(false);
		
NetworkConfig network = cfg.getNetworkConfig();
Join join = network.getJoin();
join.getMulticastConfig().setEnabled(false);
join.getTcpIpConfig().addMember("10.45.67.32").addMember("10.45.67.100")
			.setRequiredMember("192.168.10.100").setEnabled(true);
network.getInterfaces().setEnabled(true).addInterface("10.45.67.*");
		
MapConfig mapCfg = new MapConfig();
mapCfg.setName("testMap");
mapCfg.setBackupCount(2);
mapCfg.getMaxSizeConfig().setSize(10000);
mapCfg.setTimeToLiveSeconds(300);
		
MapStoreConfig mapStoreCfg = new MapStoreConfig();
mapStoreCfg.setClassName("com.hazelcast.examples.DummyStore").setEnabled(true);
mapCfg.setMapStoreConfig(mapStoreCfg);

NearCacheConfig nearCacheConfig = new NearCacheConfig();
nearCacheConfig.setMaxSize(1000).setMaxIdleSeconds(120).setTimeToLiveSeconds(300);
mapCfg.setNearCacheConfig(nearCacheConfig);

cfg.addMapConfig(mapCfg);]]></programlisting></para>
        </listitem>
    </orderedlist>
    
    After creating <literal>Config</literal> object, you can use it to
    initialize default Hazelcast instance or create a new Hazelcast instance.<itemizedlist>
        <listitem>
            <para><code language="java">Hazelcast.init(cfg);</code></para>
        </listitem>
        <listitem>
            <para><code language="java">Hazelcast.newHazelcastInstance(cfg);</code></para>
        </listitem>
    </itemizedlist>
</para>
