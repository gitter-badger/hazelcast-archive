<?xml version='1.0' encoding='UTF-8'?>
<sect1 xml:id="Lock" version='5.0' xmlns='http://docbook.org/ns/docbook'
        >
    <title>Distributed Lock</title>
    <para>
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.concurrent.locks.Lock;

Lock lock = Hazelcast.getLock(myLockedObject);
lock.lock();
try {
    // do something here
} finally {
    lock.unlock();
} 
 
]]></programlisting>

        <literal>java.util.concurrent.locks.Lock.tryLock()</literal>
        with timeout is also supported. All operations on the Lock that
        <literal>Hazelcast.getLock(Object obj)</literal>
        returns are cluster-wide and Lock behaves just like
        <literal>java.util.concurrent.lock.ReentrantLock</literal>.

        <programlisting language="java"><![CDATA[if (lock.tryLock (5000, TimeUnit.MILLISECONDS)) {
    try {  
       // do some stuff here..  
    } 
    finally {  
      lock.unlock();  
    }   
} 
]]></programlisting>

        Locks are fail-safe. If a member holds a lock and some of the members go down, cluster will keep your locks safe
        and available. Moreover, when a member leaves the cluster, all the locks acquired by this dead member will be
        removed so that these locks can be available for live members immediately.

    </para>
</sect1>
