<?xml version='1.0' encoding='UTF-8'?>

<para version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/2000/svg"
    xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook">You can declare Hazelcast beans for Spring context
    using <emphasis>beans</emphasis> namespace (default spring <emphasis>beans</emphasis> namespace)
    as well to declare hazelcast maps, queues and others.<emphasis role="bold"> Hazelcast-Spring
        integration requires either hazelcast-spring jar or hazelcast-all jar in the
        classpath.</emphasis>
    <programlisting language="xml"><![CDATA[<bean id="instance" class="com.hazelcast.core.Hazelcast" factory-method="newHazelcastInstance">
    <constructor-arg>
        <bean class="com.hazelcast.config.Config">
            <property name="groupConfig">
                <bean class="com.hazelcast.config.GroupConfig">
                    <property name="name" value="dev"/>
                    <property name="password" value="pwd"/>
                </bean>
            </property>
            <!-- and so on ... -->
        </bean>
    </constructor-arg>
</bean>

<bean id="map" factory-bean="instance" factory-method="getMap">
    <constructor-arg value="map"/>
</bean>
]]></programlisting> Hazelcast has Spring integration (requires version 2.5 or greater) since 1.9.1
    using <emphasis>hazelcast</emphasis> namespace. <itemizedlist>
        <listitem>
            <para>Add namespace
                    <emphasis>xmlns:hz="http://www.hazelcast.com/schema/config"</emphasis> to beans
                tag in context file: <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:hz="http://www.hazelcast.com/schema/config"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.hazelcast.com/schema/config
                http://www.hazelcast.com/schema/config/hazelcast-spring.xsd">
]]></programlisting></para>
        </listitem>
        <listitem>
            <para>Use <emphasis>hz</emphasis> namespace shortcuts to declare cluster, its items and
                so on. </para>
        </listitem>
    </itemizedlist> After that you can configure Hazelcast instance (node): <programlisting language="xml"><![CDATA[<hz:hazelcast id="instance">
        <hz:config>
            <hz:group name="dev" password="password"/>
            <hz:properties>
                <hz:property name="hazelcast.merge.first.run.delay.seconds">5</hz:property>
                <hz:property name="hazelcast.merge.next.run.delay.seconds">5</hz:property>
            </hz:properties>
            <hz:network port="5701" port-auto-increment="false">
                <hz:join>
                    <hz:multicast enabled="false"
                                  multicast-group="224.2.2.3"
                                  multicast-port="54327"/>
                    <hz:tcp-ip enabled="true">
                        <hz:members>10.10.1.2, 10.10.1.3</hz:members>
                    </hz:tcp-ip>
                </hz:join>
            </hz:network>
            <hz:map name="map"
                    backup-count="2"
                    max-size="0"
                    eviction-percentage="30"
                    read-backup-data="true"
                    cache-value="true"
                    eviction-policy="NONE"
                    merge-policy="hz.ADD_NEW_ENTRY"/>
        </hz:config>
</hz:hazelcast>
]]></programlisting><emphasis role="bold">As of version hazelcast 1.9.3</emphasis>, you can easily
    configure map-store and near-cache too. (For map-store you should set either
        <emphasis>class-name</emphasis> or <emphasis>implementation</emphasis> attribute.) <programlisting language="xml"><![CDATA[<hz:config>
           <hz:map name="map1">          
                    <hz:near-cache time-to-live-seconds="0" max-idle-seconds="60"
                       eviction-policy="LRU" max-size="5000"  invalidate-on-change="true"/>

                    <hz:map-store enabled="true" class-name="com.foo.DummyStore" 
                        write-delay-seconds="0"/>
           </hz:map>
           
          <hz:map name="map2">          
                    <hz:map-store enabled="true" implementation="dummyMapStore" 
                        write-delay-seconds="0"/>
           </hz:map>
  
          <bean id="dummyMapStore" class="com.foo.DummyStore" />
</hz:config>
]]></programlisting> It's possible to use placeholders instead of concrete values. For instance, use
    property file <emphasis>app-default.properties</emphasis> for group configuration: <programlisting language="xml"><![CDATA[<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:/app-default.properties</value>
        </list>
    </property>
</bean>

<hz:hazelcast id="instance">
    <hz:config>
        <hz:group
            name="${cluster.group.name}"
            password="${cluster.group.password}"/>
        <!-- ... -->
    </hz:config>
</hz:hazelcast>
]]></programlisting> Similar for client <programlisting language="xml"><![CDATA[<hz:client id="client"
    group-name="${cluster.group.name}" group-password="${cluster.group.password}">
    <hz:members>10.10.1.2:5701, 10.10.1.3:5701</hz:members>
</hz:client>
]]></programlisting> You can declare beans for the following Hazelcast objects: <itemizedlist>
        <listitem>
            <para>map </para>
        </listitem>
        <listitem>
            <para>multiMap </para>
        </listitem>
        <listitem>
            <para>queue </para>
        </listitem>
        <listitem>
            <para>topic </para>
        </listitem>
        <listitem>
            <para>set </para>
        </listitem>
        <listitem>
            <para>list </para>
        </listitem>
        <listitem>
            <para>executorService </para>
        </listitem>
        <listitem>
            <para>idGenerator </para>
        </listitem>
        <listitem>
            <para>atomicNumber </para>
        </listitem>
    </itemizedlist> Example: <programlisting language="xml"><![CDATA[   <hz:map id="map" instance-ref="instance" name="map"/>
    <hz:multiMap id="multiMap" instance-ref="instance" name="multiMap"/>
    <hz:queue id="queue" instance-ref="instance" name="queue"/>
    <hz:topic id="topic" instance-ref="instance" name="topic"/>
    <hz:set id="set" instance-ref="instance" name="set"/>
    <hz:list id="list" instance-ref="instance" name="list"/>
    <hz:executorService id="executorService" instance-ref="instance" name="executorService"/>
    <hz:idGenerator id="idGenerator" instance-ref="instance" name="idGenerator"/>
    <hz:atomicNumber id="atomicNumber" instance-ref="instance" name="atomicNumber"/>
    ]]></programlisting> If you are using Hibernate with Hazelcast as 2nd level cache provider, you
    can easily create <code>CacheProvider</code> or <code>RegionFactory</code> instances within
    Spring configuration. That way it is possible to use same <code>HazelcastInstance</code> as Hibernate L2
    cache instance.<programlisting language="xml"><![CDATA[
    <hz:hibernate-cache-provider id="cacheProvider" instance-ref="instance" />
            
    ...
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" scope="singleton">
		<property name="dataSource" ref="dataSource"/>
		<property name="cacheProvider" ref="cacheProvider" />
		...
	</bean>
	]]></programlisting> Or by Spring version 3.1 <programlisting language="xml"><![CDATA[
    <hz:hibernate-region-factory id="regionFactory" instance-ref="instance" />
            
    ...
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" scope="singleton">
		<property name="dataSource" ref="dataSource"/>
		<property name="cacheRegionFactory" ref="regionFactory" />
		...
	</bean>
	]]></programlisting>
</para>
