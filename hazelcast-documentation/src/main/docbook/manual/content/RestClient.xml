<?xml version='1.0' encoding='UTF-8'?>
<sect1 xml:id="RestClient" version='5.0' xmlns='http://docbook.org/ns/docbook'
        >
    <title>Rest Client</title>
    <para>Let's say your cluster's members are:<programlisting language="java"><![CDATA[Members [5] {
    Member [10.20.17.1:5701]
    Member [10.20.17.2:5701]
    Member [10.20.17.4:5701]
    Member [10.20.17.3:5701]
    Member [10.20.17.5:5701]
 }
]]></programlisting>And you have a distributed map named 'stocks'. You can put a new
        <literal>key1/value1</literal>
        entry into this map by issuing
        <literal>HTTP
            POST
        </literal>
        call to
        <literal>http://10.20.17.1:5701/hazelcast/rest/maps/stocks/key1</literal>
        URL. Your http post call's content body should contain the value (value1). You can
        retrieve this entry via
        <literal>HTTP GET</literal>
        call to
        <literal>http://10.20.17.1:5701/hazelcast/rest/maps/stocks/key1</literal>. You can also retrieve this
        entry from another member such
        as<literal>http://10.20.17.3:5701/hazelcast/rest/maps/stocks/key1</literal>.
    </para>
    <para>RESTful access is provided through any member of your cluster. So you can even put an
        HTTP load-balancer in-front of your cluster members for load-balancing and
        fault-tolerance.
    </para>
    <para>Now go ahead and install a REST plugin for your browser and explore further.</para>
    <para>Hazelcast also stores the mime-type of your
        <literal>POST</literal>
        request if it
        contains any. So if, for example, you post binary of an image file and set the
        mime-type of the
        <literal>HTTP POST</literal>
        request to
        <literal>image/jpeg</literal>
        then this mime-type will be part of the
        response of your
        <literal>HTTP GET</literal>
        request for that entry.
    </para>
    <para>Let's say you also have a task queue named 'tasks'. You can offer a new item into the
        queue via HTTP POST and take and item from the queue via HTTP DELETE.
    </para>
    <para>
        <code>HTTP POST http://10.20.17.1:5701/hazelcast/rest/queues/tasks &lt;CONTENT&gt;</code>
        means
        <programlisting language="java"><![CDATA[Hazelcast.getQueue("tasks").offer(<CONTENT>);
]]></programlisting>
        and
        <code>HTTP DELETE http://10.20.17.1:5701/hazelcast/rest/queues/tasks/3</code>
        means
        <programlisting language="java"><![CDATA[Hazelcast.getQueue("tasks").poll(3, SECONDS);
]]></programlisting>
        Note that you will have to handle the failures on REST polls as there is no
        transactional guarantee.
    </para>
</sect1>
