<?xml version='1.0' encoding='UTF-8'?>
<sect1 xml:id="Logging" version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns5="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1998/Math/MathML" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
    <title>Logging Configuration</title>
    <para>Hazelcast has a flexible logging configuration and doesn't depend on any logging framework except JDK logging. 
    It has in-built adaptors for a number of logging frameworks 
    and also supports custom loggers by providing logging interfaces. 
    </para>
    <para>To use built-in adaptors you should set <code>hazelcast.logging.type</code> property to one of 
    predefined types below.
    <db:itemizedlist>
    	<db:listitem>
    		<db:para><emphasis role="bold">jdk: </emphasis>JDK logging (default)</db:para>
    	</db:listitem>
    	<db:listitem>
    		<db:para><emphasis role="bold">log4j: </emphasis>Log4j</db:para>
    	</db:listitem>
    	<db:listitem>
    		<db:para><emphasis role="bold">slf4j: </emphasis>Slf4j</db:para>
    	</db:listitem>
    	<db:listitem>
    		<db:para><emphasis role="bold">none: </emphasis>disable logging</db:para>
    	</db:listitem>
    </db:itemizedlist>
    
    You can set <code>hazelcast.logging.type</code> through configuration xml, configuration API or JVM system property.
    <itemizedlist>
			<listitem>
				<para><emphasis role="bold">Configuration xml</emphasis></para>
				<para>
					<programlisting language="xml">
&lt;hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
	xmlns="http://www.hazelcast.com/schema/config"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt; 
	
	....
		
	&lt;properties&gt;
		&lt;property name="hazelcast.logging.type"&gt;jdk&lt;/property&gt; 
		....
	&lt;/properties&gt;
&lt;/hazelcast&gt;</programlisting>
				</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Configuration API</emphasis></para>
				<para>
					<programlisting language="java">
Config cfg = ... ;
cfg.setProperty("hazelcast.logging.type", "log4j");
					</programlisting>
				</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">System Property</emphasis></para>
				<para>
					<orderedlist>
						<listitem>
							<para>Using JVM parameter:
							<literal>java -Dhazelcast.logging.type=slf4j</literal></para>
						</listitem>
						<listitem>
							<para>Using System class:
							<literal>System.setProperty("hazelcast.logging.type", "none");
							</literal></para>
						</listitem>
					</orderedlist>
				</para>
			</listitem>
		</itemizedlist>
    </para>
    
    <para>To use custom logging feature you should implement <code>com.hazelcast.logging.LoggerFactory</code> and 
    <code>com.hazelcast.logging.ILogger</code> interfaces and set system property <literal>hazelcast.logging.class</literal> to 
    your custom <code>LoggerFactory</code> class name.<programlisting language="java">
	java -Dhazelcast.logging.class=foo.bar.MyLoggingFactory</programlisting></para>
	
	<para>
	You can also listen logging events generated by Hazelcast runtime by registering <literal>LogListener</literal>s
	to <literal>LoggingService</literal>.
	<programlisting language="java">
	LogListener listener = new LogListener() {
		public void log(LogEvent logEvent) {
			// do something
		}
	}
	
	LoggingService loggingService = Hazelcast.getLoggingService();
	loggingService.addLogListener(Level.INFO, listener):
	</programlisting>
	Through the <literal>LoggingService</literal> you can get the current used ILogger implementation and log your own messages too.</para>
</sect1>
