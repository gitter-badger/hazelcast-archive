<?xml version='1.0' encoding='UTF-8'?>
<sect1 xml:id="Map" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xlink='http://www.w3.org/1999/xlink'
       xmlns:xi='http://www.w3.org/2001/XInclude'
       xmlns:ns5='http://www.w3.org/2000/svg'
       xmlns:ns4='http://www.w3.org/1998/Math/MathML'
       xmlns:ns3='http://www.w3.org/1999/xhtml'
       xmlns:db='http://docbook.org/ns/docbook'>
    <title>Distributed Map</title>
    <para>Just like queue and set, Hazelcast will partition your map entries; and almost evenly
        distribute onto all Hazelcast members. Distributed maps have 1 backup (replica-count) by
        default so that if a member goes down, we don't lose data. Backup operations are synchronous
        so when a
        <literal>map.put(key, value)</literal>
        returns, it is guaranteed that the entry is
        replicated to one other node. For the reads, it is also guaranteed that
        <literal>map.get(key)</literal>
        returns the latest value of the entry. Consistency is
        strictly enforced.
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.Map;
import java.util.Collection;

Map<String, Customer> mapCustomers = Hazelcast.getMap("customers");
mapCustomers.put("1", new Customer("Joe", "Smith"));
mapCustomers.put("2", new Customer("Ali", "Selam"));
mapCustomers.put("3", new Customer("Avi", "Noyan"));

Collection<Customer> colCustomers = mapCustomers.values();
for (Customer customer : colCustomers) {
    // process customer
}
]]></programlisting>
        <literal>Hazelcast.getMap()</literal>
        actually returns
        <literal>com.hazelcast.core.IMap</literal>
        which extends
        <literal>java.util.concurrent.ConcurrentMap</literal>
        interface. So methods like
        <literal>ConcurrentMap.putIfAbsent(key,value)</literal>
        and
        <literal>ConcurrentMap.replace(key,value)</literal>
        can be used on distributed map as
        shown in the example below.
        <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import java.util.concurrent.ConcurrentMap;

Customer getCustomer (String id) {
    ConcurrentMap<String, Customer> map = Hazelcast.getMap("customers");
    Customer customer = map.get(id);
    if (customer == null) {
        customer = new Customer (id);
        customer = map.putIfAbsent(id, customer);
    }
    return customer;
}               

public boolean updateCustomer (Customer customer) {
    ConcurrentMap<String, Customer> map = Hazelcast.getMap("customers");
    return (map.replace(customer.getId(), customer) != null);            
}
                
public boolean removeCustomer (Customer customer) {
    ConcurrentMap<String, Customer> map = Hazelcast.getMap("customers");
    return map.remove(customer.getId(), customer) );           
}                                  
        
]]></programlisting>
        All
        <literal>ConcurrentMap</literal>
        operations such as
        <literal>put</literal>
        and
        <literal>remove</literal>
        might wait if the key is locked by another thread in the local
        or remote JVM, but they will eventually return with success.
        <literal>ConcurrentMap</literal>
        operations never
        throw<literal>java.util.ConcurrentModificationException</literal>.
        <para>Also see:
            <itemizedlist>
                <listitem><link xlink:href="#InternalsDistributedMap">Distributed Map internals</link>.
                </listitem>
                <listitem><link xlink:href="#DataAffinity">Data Affinity</link>.
                </listitem>
                <listitem><link xlink:href="#WildcardConfiguration">Map Configuration with wildcards.</link>.
                </listitem>
            </itemizedlist>

        </para>
    </para>
    <sect2 xml:id="MapBackup" version='5.0' xmlns='http://docbook.org/ns/docbook'
           xmlns:xlink='http://www.w3.org/1999/xlink'
           xmlns:xi='http://www.w3.org/2001/XInclude'
           xmlns:ns5='http://www.w3.org/2000/svg'
           xmlns:ns4='http://www.w3.org/1998/Math/MathML'
           xmlns:ns3='http://www.w3.org/1999/xhtml'
           xmlns:db='http://docbook.org/ns/docbook'>
        <title>Backups</title>
        <para>Hazelcast will distribute map entries onto multiple JVMs (cluster members). Each JVM
            holds some portion of the data but we don't want to lose data when a member JVM crashes.
            To provide data-safety, Hazelcast allows you to specify the number of backup copies you
            want to have. That way data on a JVM will be synchronously copied onto other JVM(s). By
            default, Hazelcast will have one backup copy. Backup operations
            are<emphasis>synchronous</emphasis>. When a
            <literal>map.put(key,value)</literal>
            call returns, it means entry is updated on the both owner and backup JVMs. If backup
            count &gt;= 1, then each member will carry both owned entries and backup copies of other
            member(s). So for the
            <literal>map.get(key)</literal>
            call, it is possible that calling
            member has backup copy of that key but by default,
            <literal>map.get(key)</literal>
            will always read the
            value from the actual owner of the key for consistency. It is possible to enable backup
            reads by changing the configuration. Enabling backup reads will give you greater
            performance.
            <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="default">
        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <backup-count>1</backup-count>

        <!--
            Can we read the local backup entries? Default value is false for
            strong consistency. Being able to read backup data will give you
            greater performance.
        -->
        <read-backup-data>false</read-backup-data>

        ...

    </map>
</hazelcast>
]]></programlisting>
        </para>
    </sect2>
    <sect2 xml:id="MapEviction" version='5.0' xmlns='http://docbook.org/ns/docbook'
           xmlns:xlink='http://www.w3.org/1999/xlink'
           xmlns:xi='http://www.w3.org/2001/XInclude'
           xmlns:ns5='http://www.w3.org/2000/svg'
           xmlns:ns4='http://www.w3.org/1998/Math/MathML'
           xmlns:ns3='http://www.w3.org/1999/xhtml'
           xmlns:db='http://docbook.org/ns/docbook'>
        <title>Eviction</title>
        <para>Hazelcast also supports policy based eviction for distributed map. Currently supported
            eviction policies are LRU (Least Recently Used) and LFU (Least Frequently Used). This
            feature enables Hazelcast to be used as a distributed cache. If
            <literal>time-to-live-seconds</literal>
            is not 0 then entries older than
            <literal>time-to-live-seconds</literal>
            value will get evicted, regardless of the
            eviction policy set. Here is a sample configuration for eviction:
            <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="default">
        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <backup-count>1</backup-count>

        <!--
            Maximum number of seconds for each entry to stay in the map. Entries that are
            older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
            will get automatically evicted from the map.
            Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
        -->
        <time-to-live-seconds>0</time-to-live-seconds>

        <!--
            Maximum number of seconds for each entry to stay idle in the map. Entries that are
            idle(not touched) for more than <max-idle-seconds> will get
            automatically evicted from the map.
            Entry is touched if get, put or containsKey is called.
            Any integer between 0 and Integer.MAX_VALUE.
            0 means infinite. Default is 0.
        -->
        <max-idle-seconds>0</max-idle-seconds>

        <!--
            Valid values are:
            NONE (no extra eviction, <time-to-live-seconds> may still apply),
            LRU  (Least Recently Used),
            LFU  (Least Frequently Used).
            NONE is the default.
            Regardless of the eviction policy used, <time-to-live-seconds> will still apply. 
        -->
        <eviction-policy>LRU</eviction-policy>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size>5000</max-size>

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>
       <!--
            Specifies when eviction will be started. Default value is 3. 
           So every 3 (+up to 5 for performance reasons) seconds 
           eviction will be kicked of. Eviction is costly operation, setting 
           this number too low, can decrease the performance. 
       -->
      <eviction-delay-seconds>3</eviction-delay-seconds>
    </map>
</hazelcast>
]]></programlisting>
        </para>
    </sect2>
    <sect2 xml:id="MapPersistence" version='5.0' xmlns='http://docbook.org/ns/docbook'
           xmlns:xlink='http://www.w3.org/1999/xlink'
           xmlns:xi='http://www.w3.org/2001/XInclude'
           xmlns:db='http://docbook.org/ns/docbook'>
        <title>Persistence</title>
        <para>Hazelcast allows you to load and store the distributed map entries from/to a
            persistent datastore such as relational database. If a loader implementation is
            provided, when
            <literal>get(key)</literal>
            is called, if the map entry doesn't exist
            in-memory then Hazelcast will call your loader implementation to load the entry from a
            datastore. If a store implementation is provided, when
            <literal>put(key,value)</literal>
            is called, Hazelcast will call your store implementation to store the entry into a
            datastore. Hazelcast can call your implementation to store the entries synchronously
            (write-through) with no-delay or asynchronously (write-behind) with delay and it is
            defined by the
            <literal>write-delay-seconds</literal>
            value in the configuration.
        </para>
        <para>If it is write-through, when the
            <literal>map.put(key,value)</literal>
            call returns,
            you can be sure that
            <itemizedlist>
                <listitem>
                    <para>
                        <literal>MapStore.store(key,value)</literal>
                        is successfully called so the
                        entry is persisted.
                    </para>
                </listitem>
                <listitem>
                    <para>In-Memory entry is updated</para>
                </listitem>
                <listitem>
                    <para>In-Memory backup copies are successfully created on other JVMs (if
                        backup-count is greater than 0)
                    </para>
                </listitem>
            </itemizedlist>
            If it is write-behind, when the
            <literal>map.put(key,value)</literal>
            call returns, you can be sure that
            <itemizedlist>
                <listitem>
                    <para>In-Memory entry is updated</para>
                </listitem>
                <listitem>
                    <para>In-Memory backup copies are successfully created on other JVMs (if
                        backup-count is greater than 0)
                    </para>
                </listitem>
                <listitem>
                    <para>The entry is marked as
                        <literal>dirty</literal>
                        so that after
                        <literal>write-delay-seconds</literal>, it can be persisted.
                    </para>
                </listitem>
            </itemizedlist>
            Same behavior goes for the
            <literal>remove(key</literal>
            and
            <literal>MapStore.delete(key)</literal>. If
            <literal>MapStore</literal>
            throws an
            exception then the exception will be propagated back to the original
            <literal>put</literal>
            or
            <literal>remove</literal>
            call in the form of
            <literal>RuntimeException</literal>. When write-through is used, Hazelcast will call
            <literal>MapStore.store(key,value)</literal>
            and
            <literal>MapStore.delete(key)</literal>
            for each entry update. When write-behind is
            used, Hazelcast will call<literal>MapStore.store(map)</literal>, and
            <literal>MapStore.delete(collection)</literal>
            to do all writes in a single call.
            Also note that your MapStore or MapLoader implementation should not use Hazelcast
            Map/Queue/MultiMap/List/Set operations. Your implementation should only work with your
            data store. Otherwise you may get into deadlock situations.
        </para>
        <para>Here is a sample configuration:
            <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="default">
        ...
        <map-store enabled="true">
            <!--
               Name of the class implementing MapLoader and/or MapStore. 
               The class should implement at least of these interfaces and
               contain no-argument constructor. Note that the inner classes are not supported.
            -->
            <class-name>com.hazelcast.examples.DummyStore</class-name>
            <!--
               Number of seconds to delay to call the MapStore.store(key, value).
               If the value is zero then it is write-through so MapStore.store(key, value)
               will be called as soon as the entry is updated.
               Otherwise it is write-behind so updates will be stored after write-delay-seconds
               value by calling Hazelcast.storeAll(map). Default value is 0.
            -->
            <write-delay-seconds>0</write-delay-seconds>
        </map-store>
    </map>
</hazelcast>
]]></programlisting>
        </para>
        <para>
            <emphasis role="italic">
                <emphasis role="bold">Initialization on
                    startup:
                </emphasis>
            </emphasis>
        </para>
        <para>As of 1.9.3
            <literal>MapLoader</literal>
            has the new
            <literal>MapLoader.loadAllKeys</literal>
            API. It is used for pre-populating the
            in-memory map when the map is first touched/used. If
            <literal>MapLoader.loadAllKeys</literal>
            returns NULL then nothing will be loaded.
            Your
            <literal>MapLoader.loadAllKeys</literal>
            implementation can return all or some of the keys. You may
            select and return only the
            <literal>hot</literal>
            keys, for instance. Also note that
            this is the fastest way of pre-populating the map as Hazelcast will optimize the loading
            process by having each node loading owned portion of the entries.
        </para>
        <para>Here is MapLoader initialization flow;
            <db:orderedlist>
                <listitem>
                    <para>When
                        <code>getMap()</code>
                        first called from any node, initialization starts
                    </para>
                </listitem>
                <listitem>
                    <para>Hazelcast will call
                        <code>MapLoader.loadAllKeys()</code>
                        to get all your keys on each
                        node
                    </para>
                </listitem>
                <listitem>
                    <para>Each node will figure out the list of keys it owns</para>
                </listitem>
                <listitem>
                    <para>Each node will load all its owned keys by calling
                        <code>MapLoader.loadAll(keys)</code>
                    </para>
                </listitem>
                <listitem>
                    <para>Each node puts its owned entries into the map by
                        calling
                        <code>IMap.putTransient(key,value)</code>
                    </para>
                </listitem>
            </db:orderedlist>
        </para>
    </sect2>
    <sect2 xml:id="MapQuery" version="5.0" xmlns="http://docbook.org/ns/docbook"
           xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
           xmlns:db="http://docbook.org/ns/docbook">
        <title>Query</title>
        <para>Hazelcast partitions your data and spreads across cluster of servers. You can surely
            iterate over the map entries and look for certain entries you are interested in but this
            is not very efficient as you will have to bring entire entry set and iterate locally.
            Instead, Hazelcast allows you to run distributed queries on your distributed map.
        </para>
        <para>Let's say you have a "employee" map containing values of
            <literal>Employee</literal>
            objects:<programlisting language="java"><![CDATA[import java.io.Serializable;

public class Employee implements Serializable {
    private String name;
    private int age;
    private boolean active;
    private double salary;

    public Employee(String name, int age, boolean live, double price) {
        this.name = name;
        this.age = age;
        this.active = live;
        this.salary = price;
    }

    public Employee() {
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public double getSalary() {
        return salary;
    }

    public boolean isActive() {
        return active;
    }
}
]]></programlisting>Now you are looking for the employees who are active and with age less than 30.
            Hazelcast allows you to find these entries in two different ways:
        </para>
        <para>
            <emphasis role="bold">Distributed SQL Query</emphasis>
        </para>
        <para>
            <literal>SqlPredicate</literal>
            takes regular SQL where clause. Here is an example:
            <programlisting language="java"><![CDATA[import com.hazelcast.core.IMap;
import com.hazelcast.query.SqlPredicate;

IMap map = Hazelcast.getMap("employee");

Set<Employee> employees = (Set<Employee>) map.values(new SqlPredicate("active AND age < 30"));
]]></programlisting>
            Supported SQL syntax:
            <itemizedlist>
                <listitem>
                    <para>AND/OR
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>&lt;expression&gt; AND &lt;expression&gt; AND
                                        &lt;expression&gt;...
                                    </literal>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                <literal>active AND age&gt;30</literal>
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>active=false OR age = 45 OR name =
                                                    'Joe'
                                                </literal>
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>active AND (age &gt;20 OR salary &lt;
                                                    60000)
                                                </literal>
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>=, !=, &lt;, &lt;=, &gt;, &gt;=</literal>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>&lt;expression&gt; = value</literal>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                <literal>age &lt;= 30</literal>
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>name ="Joe"</literal>
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>salary != 50000</literal>
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>BETWEEN
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>&lt;attribute&gt; [NOT] BETWEEN &lt;value1&gt; AND
                                        &lt;value2&gt;</literal>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                <literal>age BETWEEN 20 AND 33 (same as age &gt;=20
                                                    AND age&lt;=33)
                                                </literal>
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>age NOT BETWEEN 30 AND 40 (same as age
                                                    &lt;30 OR age&gt;40)
                                                </literal>
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>LIKE
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>&lt;attribute&gt; [NOT] LIKE 'expression'</literal>
                                </para>
                                <para>
                                    <literal>%</literal>
                                    (percentage sign) is placeholder for many
                                    characters,
                                    <literal>_</literal>
                                    (underscore) is placeholder for
                                    only one character.
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                <literal>name LIKE 'Jo%'</literal>
                                                (true for 'Joe',
                                                'Josh', 'Joseph' etc.)
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>name LIKE 'Jo_'</literal>
                                                (true for 'Joe';
                                                false for 'Josh')
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>name NOT LIKE 'Jo_'</literal>
                                                (true for
                                                'Josh'; false for 'Joe')
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>name LIKE 'J_s%'</literal>
                                                (true for
                                                'Josh', 'Joseph'; false 'John', 'Joe')
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>IN
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>&lt;attribute&gt; [NOT] IN (val1, val2,
                                        ...)
                                    </literal>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                <literal>age IN (20, 30, 40)</literal>
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                <literal>age NOT IN (60, 70)</literal>
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
            Examples:
            <itemizedlist>
                <listitem>
                    <para>
                        <literal>active AND (salary &gt;= 50000 OR (age NOT BETWEEN 20 AND
                            30))
                        </literal>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>age IN (20, 30, 40) AND salary BETWEEN (50000, 80000)</literal>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <emphasis role="bold">Criteria API</emphasis>
        </para>
        <para>If SQL is not enough or programmable queries are preferred then JPA criteria like API
            can be used. Here is an example:
            <programlisting language="java"><![CDATA[import com.hazelcast.core.IMap;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.PredicateBuilder;
import com.hazelcast.query.EntryObject;

IMap map = Hazelcast.getMap("employee");

EntryObject e = new PredicateBuilder().getEntryObject();
Predicate predicate = e.is("active").and(e.get("age").lessThan(30));

Set<Employee> employees = (Set<Employee>) map.values(predicate);

]]></programlisting>
        </para>
        <para>
            <emphasis role="bold">Indexing</emphasis>
        </para>
        <para>Hazelcast distributed queries will run on each member in parallel and only results
            will return the caller. When a query runs on a member, Hazelcast will iterate through
            the entire owned entries and find the matching ones. Can we make this even faster? Yes
            by indexing the mostly queried fields. Just like you would do for your database. Of
            course, indexing will add overhead for each
            <literal>write</literal>
            operation but
            queries will be a lot faster. If you are querying your map a lot then make sure to add
            indexes for most frequently queried fields. So if your
            <literal>active and age &lt;
                30
            </literal>
            query, for example, is used a lot then make sure you add index for
            <literal>active</literal>
            and
            <literal>age</literal>
            fields. Here is how:
            <programlisting language="java"><![CDATA[IMap imap = Hazelcast.getMap("employees");
imap.addIndex("age", true);        // ordered, since we have ranged queries for this field
imap.addIndex("active", false);    // not ordered, because boolean field cannot have range
]]></programlisting>
            API
            <literal>IMap.addIndex(fieldName, ordered)</literal>
            is used for adding
            index. For a each indexed field, if you have -ranged- queries such
            as<literal>age&gt;30</literal>,
            <literal>age BETWEEN 40 AND 60</literal>
            then
            <literal>ordered</literal>
            parameter should be<literal>true</literal>, otherwise set
            it to<literal>false</literal>.
        </para>
    </sect2>
    <sect2 xml:id="MapNearCache" version='5.0' xmlns='http://docbook.org/ns/docbook'
           xmlns:xlink='http://www.w3.org/1999/xlink'
           xmlns:xi='http://www.w3.org/2001/XInclude'
           xmlns:db='http://docbook.org/ns/docbook'>
        <title>Near Cache</title>
        <para>Map entries in Hazelcast are partitioned across the cluster. Imagine that you are
            reading key
            <literal>k</literal>
            so many times and
            <literal>k</literal>
            is owned by another member in your cluster. Each
            <literal>map.get(k)</literal>
            will
            be a remote operation; lots of network trips.
            If you have a map that is read-mostly then you should consider creating a
            <literal>Near Cache</literal>
            for the map so that reads can be much faster and consume less network traffic.
            All these benefits don't come free. When using near cache, you should consider the following issues:
            <itemizedlist>
                <listitem>
                    <para>JVM will have to hold extra cached data so it will increase the memory consumption.
                    </para>
                </listitem>
                <listitem>
                    <para>If invalidation is turned on and entries are updated frequently, then invalidations will be
                        costly.
                    </para>
                </listitem>
                <listitem>
                    <para>Near cache breaks the strong consistency guarantees; you might be reading stale data.
                    </para>
                </listitem>
            </itemizedlist>
            Near cache is highly recommended for the maps that are read-mostly.
            Here is a near-cache configuration for a map :
            <programlisting language="xml"><![CDATA[<hazelcast>
    ...
    <map name="my-read-mostly-map">
        ...
        <near-cache>
            <!--
                Maximum number of seconds for each entry to stay in the near cache. Entries that are
                older than <time-to-live-seconds> will get automatically evicted from the near cache.
                Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
            -->
            <time-to-live-seconds>0</time-to-live-seconds>

            <!--
                Maximum number of seconds each entry can stay in the near cache as untouched (not-read).
                Entries that are not read (touched) more than <max-idle-seconds> value will get removed
                from the near cache.
                Any integer between 0 and Integer.MAX_VALUE. 0 means
                Integer.MAX_VALUE. Default is 0.
            -->
            <max-idle-seconds>60</max-idle-seconds>

            <!--
                Valid values are:
                NONE (no extra eviction, <time-to-live-seconds> may still apply),
                LRU  (Least Recently Used),
                LFU  (Least Frequently Used).
                NONE is the default.
                Regardless of the eviction policy used, <time-to-live-seconds> will still apply.
            -->
            <eviction-policy>LRU</eviction-policy>

            <!--
                Maximum size of the near cache. When max size is reached,
                cache is evicted based on the policy defined.
                Any integer between 0 and Integer.MAX_VALUE. 0 means
                Integer.MAX_VALUE. Default is 0.
            -->
            <max-size>5000</max-size>

            <!--
                Should the cached entries get evicted if the entries are changed (updated or removed).
                true of false. Default is true.
            -->
            <invalidate-on-change>true</invalidate-on-change>

        </near-cache>
    </map>
</hazelcast>
]]></programlisting>

        </para>
    </sect2>
    <sect2 xml:id="MapEntry" version='5.0' xmlns='http://docbook.org/ns/docbook'
           xmlns:xlink='http://www.w3.org/1999/xlink'
           xmlns:xi='http://www.w3.org/2001/XInclude'
           xmlns:db='http://docbook.org/ns/docbook'>
        <title>Entry Statistics</title>
        <para>
            Hazelcast keeps extra information about each map entry such as creationTime, lastUpdateTime, lastAccessTime,
            number of hits, version, and this information is exposed to the developer via
            <literal>IMap.getMapEntry(key)</literal>
            call. Here is
            an example:
            <programlisting language="java"><![CDATA[import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.MapEntry;

MapEntry entry = Hazelcast.getMap("quotes").getMapEntry("1");
System.out.println ("size in memory  : " + entry.getCost();
System.out.println ("creationTime    : " + entry.getCreationTime();
System.out.println ("expirationTime  : " + entry.getExpirationTime();
System.out.println ("number of hits  : " + entry.getHits();
System.out.println ("lastAccessedTime: " + entry.getLastAccessTime();
System.out.println ("lastUpdateTime  : " + entry.getLastUpdateTime();
System.out.println ("version         : " + entry.getVersion();
System.out.println ("isValid         : " + entry.isValid();
System.out.println ("key             : " + entry.getKey();
System.out.println ("value           : " + entry.getValue();
System.out.println ("oldValue        : " + entry.setValue(newValue);
]]></programlisting>

        </para>
    </sect2>

    <xi:include href="WildcardConfigurationLink.xml"/>
</sect1>
